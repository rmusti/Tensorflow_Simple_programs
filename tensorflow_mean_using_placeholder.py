# -*- coding: utf-8 -*-
"""Tensorflow_Mean_Using_Placeholder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lqh3KXm5VD5qNRtm_EpMj9DbO8OxKlaU
"""

import tensorflow as tf
import numpy as np

g = tf.Graph()


with g.as_default():
  tf_a = tf.placeholder("float" , shape= [None , 2], name = 'tf_a')
  
  
  x_mean = tf.reduce_mean(tf_a, axis = 0 , name = 'mean')
  
  
  
  
  with tf.Session(graph = g) as sess:
    np.random.seed(123)
    a = np.random.uniform(size = (2,2))*10
    print( "The Array:", a)
    print( "The shape of Array:", a.shape)
    print('Mean of Array:' , sess.run(x_mean , feed_dict = {tf_a : a}))
    
    b = np.random.uniform(size = (5,2))*10
    print( "The Array:", b)
    print( "The shape of Array:", b.shape)
    print('Mean of Array:' , sess.run(x_mean , feed_dict = {tf_a : b}))

import tensorflow as tf
import numpy as np

g = tf.Graph()


with g.as_default():
  a = tf.constant(np.pi)
  b = tf.constant([1,2,3])
  c = tf.constant([[1,2],[2,3]])


  ra = tf.rank(a)
  rb = tf.rank(b)
  rc = tf.rank(c)

  sa = a.get_shape()
  sb = b.get_shape()
  sc = c.get_shape()


  print("Shape" , sa,sb,sc)
  
with tf.Session(graph = g) as sess:
  print('Tensor:' , a.eval() ,b.eval(),c.eval())

  print('Rank:' , ra.eval(),rb.eval(),rc.eval())

import tensorflow as tf
import numpy as np

g = tf.Graph()


with g.as_default():
  a = tf.constant(1 , name = 'a')
  b = tf.constant(2 , name = 'b')
  c = tf.constant(3 , name = 'c')
  
  z = a*b + c
  
 
with tf.Session(graph = g) as sess:

  print('Result:' , sess.run(z))

import numpy as np

g = tf.Graph()


with g.as_default():
  tf_a = tf.placeholder("float" , shape= [None , 2], name = 'tf_a')
  
  
  x_mean = tf.reduce_mean(tf_a, axis = 0 , name = 'mean')
  
  
  
  
  with tf.Session(graph = g) as sess:
    np.random.seed(123)
    a = np.random.uniform(size = (2,2))*10
    print( "The Array:", a)
    print( "The shape of Array:", a.shape)
    print('Mean of Array:' , sess.run(x_mean , feed_dict = {tf_a : a}))
    
    b = np.random.uniform(size = (5,2))*10
    print( "The Array:", b)
    print( "The shape of Array:", b.shape)
    print('Mean of Array:' , sess.run(x_mean , feed_dict = {tf_a : b}))

import tensorflow as tf
import numpy as np

g = tf.Graph()


with g.as_default():
  tf_a = tf.placeholder("float" , shape= [], name = 'tf_a')
  tf_b = tf.placeholder("float"  , shape= [], name = 'tf_b')
  tf_c = tf.placeholder("float"   , shape= [], name = 'tf_c')
  
  r1 = tf_a*tf_b + tf_c
  r2 = 2*tf_a
  z = 4*tf_c + r2
  
  with tf.Session(graph = g) as sess:
    feed = { tf_a : 3 , tf_b :2 , tf_c : 4 }
    print('Result:' , sess.run(z , feed_dict = feed))

import tensorflow as tf
import numpy as np

g = tf.Graph()


with g.as_default():
  tf_a = tf.placeholder("float" , shape= [None , 2], name = 'tf_a')
  
  
  x_mean = tf.reduce_mean(tf_a, axis = 0 , name = 'mean')
  
  
  
  
  with tf.Session(graph = g) as sess:
    np.random.seed(123)
    a = np.random.uniform(size = (2,2))*10
    print( "The Array:", a)
    print( "The shape of Array:", a.shape)
    print('Mean of Array:' , sess.run(x_mean , feed_dict = {tf_a : a}))
    
    b = np.random.uniform(size = (5,2))*10
    print( "The Array:", b)
    print( "The shape of Array:", b.shape)
    print('Mean of Array:' , sess.run(x_mean , feed_dict = {tf_a : b}))